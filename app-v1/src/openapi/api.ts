/* tslint:disable */
/* eslint-disable */
/**
 * Spectra
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

export interface ErrorDetail {
    /**
     * Where the error occurred, e.g. \'body.items[3].tags\' or \'path.thing-id\'
     */
    'location'?: string;
    /**
     * Error message text
     */
    'message'?: string;
    'value'?: any;
}
export interface ErrorModel {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    'detail'?: string;
    /**
     * Optional list of individual error details
     */
    'errors'?: Array<ErrorDetail> | null;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    'instance'?: string;
    /**
     * HTTP status code
     */
    'status'?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    'title'?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    'type'?: string;
}
export interface ForgotPasswordPostInputBody {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    'email': string;
}
export interface ForgotPasswordPostOutputBody {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    'message': string;
}
export interface HomeGetOutputBody {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    'message': string;
}
export interface Profile {
    'created': string;
    'email': string;
    'id': number;
    'name': string;
}
export interface ProfileGetOutputBody {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    'object': Profile;
}
export interface ProfileUpdate {
    'id'?: number;
    'name'?: string;
}
export interface ProfileUpdateEmail {
    'email'?: string;
    'id'?: number;
}
export interface ProfileUpdateEmailInputBody {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    'object': ProfileUpdateEmail;
}
export interface ProfileUpdateEmailOutputBody {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    'object': Profile;
}
export interface ProfileUpdateInputBody {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    'object': ProfileUpdate;
}
export interface ProfileUpdateOutputBody {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    'object': Profile;
}
export interface ResetPasswordPostInputBody {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    'code': string;
    'password': string;
}
export interface ResetPasswordPostOutputBody {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    'message': string;
}
export interface SignInInputBody {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    'email': string;
    'password': string;
}
export interface SignInOutputBody {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    'token': string;
}
export interface SignUpInputBody {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    'email': string;
    'password': string;
}
export interface SignUpOutputBody {
    /**
     * A URL to the JSON Schema for this object.
     */
    '$schema'?: string;
    'token': string;
}

/**
 * AuthApi - axios parameter creator
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ForgotPasswordPostInputBody} forgotPasswordPostInputBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordPostAPI: async (forgotPasswordPostInputBody: ForgotPasswordPostInputBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordPostInputBody' is not null or undefined
            assertParamExists('forgotPasswordPostAPI', 'forgotPasswordPostInputBody', forgotPasswordPostInputBody)
            const localVarPath = `/auth/forgotpassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordPostInputBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordPostInputBody} resetPasswordPostInputBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordPostAPI: async (resetPasswordPostInputBody: ResetPasswordPostInputBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordPostInputBody' is not null or undefined
            assertParamExists('resetPasswordPostAPI', 'resetPasswordPostInputBody', resetPasswordPostInputBody)
            const localVarPath = `/auth/resetpassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordPostInputBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignInInputBody} signInInputBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInAPI: async (signInInputBody: SignInInputBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signInInputBody' is not null or undefined
            assertParamExists('signInAPI', 'signInInputBody', signInInputBody)
            const localVarPath = `/auth/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInInputBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignUpInputBody} signUpInputBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpAPI: async (signUpInputBody: SignUpInputBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signUpInputBody' is not null or undefined
            assertParamExists('signUpAPI', 'signUpInputBody', signUpInputBody)
            const localVarPath = `/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpInputBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordPostInputBody} forgotPasswordPostInputBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPasswordPostAPI(forgotPasswordPostInputBody: ForgotPasswordPostInputBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForgotPasswordPostOutputBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPasswordPostAPI(forgotPasswordPostInputBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.forgotPasswordPostAPI']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordPostInputBody} resetPasswordPostInputBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordPostAPI(resetPasswordPostInputBody: ResetPasswordPostInputBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPasswordPostOutputBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordPostAPI(resetPasswordPostInputBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.resetPasswordPostAPI']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SignInInputBody} signInInputBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signInAPI(signInInputBody: SignInInputBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignInOutputBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signInAPI(signInInputBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.signInAPI']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SignUpInputBody} signUpInputBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUpAPI(signUpInputBody: SignUpInputBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignUpOutputBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUpAPI(signUpInputBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.signUpAPI']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordPostInputBody} forgotPasswordPostInputBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordPostAPI(forgotPasswordPostInputBody: ForgotPasswordPostInputBody, options?: RawAxiosRequestConfig): AxiosPromise<ForgotPasswordPostOutputBody> {
            return localVarFp.forgotPasswordPostAPI(forgotPasswordPostInputBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordPostInputBody} resetPasswordPostInputBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordPostAPI(resetPasswordPostInputBody: ResetPasswordPostInputBody, options?: RawAxiosRequestConfig): AxiosPromise<ResetPasswordPostOutputBody> {
            return localVarFp.resetPasswordPostAPI(resetPasswordPostInputBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SignInInputBody} signInInputBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInAPI(signInInputBody: SignInInputBody, options?: RawAxiosRequestConfig): AxiosPromise<SignInOutputBody> {
            return localVarFp.signInAPI(signInInputBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SignUpInputBody} signUpInputBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpAPI(signUpInputBody: SignUpInputBody, options?: RawAxiosRequestConfig): AxiosPromise<SignUpOutputBody> {
            return localVarFp.signUpAPI(signUpInputBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {ForgotPasswordPostInputBody} forgotPasswordPostInputBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public forgotPasswordPostAPI(forgotPasswordPostInputBody: ForgotPasswordPostInputBody, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).forgotPasswordPostAPI(forgotPasswordPostInputBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordPostInputBody} resetPasswordPostInputBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public resetPasswordPostAPI(resetPasswordPostInputBody: ResetPasswordPostInputBody, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).resetPasswordPostAPI(resetPasswordPostInputBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignInInputBody} signInInputBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public signInAPI(signInInputBody: SignInInputBody, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).signInAPI(signInInputBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignUpInputBody} signUpInputBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public signUpAPI(signUpInputBody: SignUpInputBody, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).signUpAPI(signUpInputBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HomeApi - axios parameter creator
 */
export const HomeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homeGetAPI: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomeApi - functional programming interface
 */
export const HomeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HomeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homeGetAPI(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeGetOutputBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.homeGetAPI(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeApi.homeGetAPI']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HomeApi - factory interface
 */
export const HomeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HomeApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homeGetAPI(options?: RawAxiosRequestConfig): AxiosPromise<HomeGetOutputBody> {
            return localVarFp.homeGetAPI(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HomeApi - object-oriented interface
 */
export class HomeApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public homeGetAPI(options?: RawAxiosRequestConfig) {
        return HomeApiFp(this.configuration).homeGetAPI(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileGetAPI: async (authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProfileUpdateInputBody} profileUpdateInputBody 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileUpdateAPI: async (profileUpdateInputBody: ProfileUpdateInputBody, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileUpdateInputBody' is not null or undefined
            assertParamExists('profileUpdateAPI', 'profileUpdateInputBody', profileUpdateInputBody)
            const localVarPath = `/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profileUpdateInputBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProfileUpdateEmailInputBody} profileUpdateEmailInputBody 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileUpdateEmailAPI: async (profileUpdateEmailInputBody: ProfileUpdateEmailInputBody, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileUpdateEmailInputBody' is not null or undefined
            assertParamExists('profileUpdateEmailAPI', 'profileUpdateEmailInputBody', profileUpdateEmailInputBody)
            const localVarPath = `/users/profile/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profileUpdateEmailInputBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profileGetAPI(authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileGetOutputBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profileGetAPI(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.profileGetAPI']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ProfileUpdateInputBody} profileUpdateInputBody 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profileUpdateAPI(profileUpdateInputBody: ProfileUpdateInputBody, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileUpdateOutputBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profileUpdateAPI(profileUpdateInputBody, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.profileUpdateAPI']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ProfileUpdateEmailInputBody} profileUpdateEmailInputBody 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profileUpdateEmailAPI(profileUpdateEmailInputBody: ProfileUpdateEmailInputBody, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileUpdateEmailOutputBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profileUpdateEmailAPI(profileUpdateEmailInputBody, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.profileUpdateEmailAPI']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileGetAPI(authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<ProfileGetOutputBody> {
            return localVarFp.profileGetAPI(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProfileUpdateInputBody} profileUpdateInputBody 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileUpdateAPI(profileUpdateInputBody: ProfileUpdateInputBody, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<ProfileUpdateOutputBody> {
            return localVarFp.profileUpdateAPI(profileUpdateInputBody, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProfileUpdateEmailInputBody} profileUpdateEmailInputBody 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileUpdateEmailAPI(profileUpdateEmailInputBody: ProfileUpdateEmailInputBody, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<ProfileUpdateEmailOutputBody> {
            return localVarFp.profileUpdateEmailAPI(profileUpdateEmailInputBody, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public profileGetAPI(authorization?: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).profileGetAPI(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProfileUpdateInputBody} profileUpdateInputBody 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public profileUpdateAPI(profileUpdateInputBody: ProfileUpdateInputBody, authorization?: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).profileUpdateAPI(profileUpdateInputBody, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProfileUpdateEmailInputBody} profileUpdateEmailInputBody 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public profileUpdateEmailAPI(profileUpdateEmailInputBody: ProfileUpdateEmailInputBody, authorization?: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).profileUpdateEmailAPI(profileUpdateEmailInputBody, authorization, options).then((request) => request(this.axios, this.basePath));
    }
}



